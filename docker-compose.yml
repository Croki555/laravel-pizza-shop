services:
    # Описание сервиса Nginx
    nginx:
        image: nginx:alpine

        # Пробрасываем порт 80 из контейнера на порт ${APP_PORT} (если переменная не задана, то 80) на хосте
        ports:
            - "${APP_PORT:-80}:80"

        # Подключаем наш кастомный конфиг Nginx внутрь контейнера (заменяем стандартный).
        volumes:
            - ./Docker/nginx/nginx.conf:/etc/nginx/conf.d/default.conf
            - .:/var/www/html

        restart: unless-stopped  # Автоперезапуск, пока не остановлен вручную

        # Запускаем nginx только после запуска сервиса pizza.shop.
        depends_on:
            - pizza.shop

        # Подключение к сети (app-network)
        networks:
            - app-network

    # Описание сервиса Laravel pizza shop
    pizza.shop:
        build:
            context: . # Собираем образ из текущей директории.
            dockerfile: ./Docker/Dockerfile # Указывает путь к Dockerfile

            # Передаем переменную WWWGROUP в Dockerfile (обычно для настройки прав пользователя)
            #args:
                #WWWGROUP: '${WWWGROUP:-1000}'

        # Монтируем текущую директорию в контейнер (для live-обновления кода без пересборки)
        volumes:
            - .:/var/www/html:z
            - ./vendor:/var/www/html/vendor

        restart: unless-stopped  # Автоперезапуск, пока не остановлен вручную

        # Устанавливаем переменную окружения (обычно для настройки пользователя PHP-FPM)
        environment:
            WWWUSER: '${WWWUSER:-1000}'
            REDIS_HOST: redis
            REDIS_PORT: 6379
            CACHE_DRIVER: redis

        # Подключение к сети (app-network)
        networks:
            - app-network

        # Запускаем этот сервис только после запуска pgsql и redis
        depends_on:
            pgsql:
                condition: service_healthy
            redis:
                condition: service_healthy
        # Проверяем, работу сервиса
        healthcheck:
            test: [ "CMD-SHELL", "php artisan inspire > /dev/null 2>&1" ]
            interval: 10s
            timeout: 5s
            retries: 3

    # Описание сервиса PostgreSql
    pgsql:
        image: postgres:17
        environment:
            POSTGRES_DB: '${DB_DATABASE}'
            POSTGRES_USER: '${DB_USERNAME}'
            POSTGRES_PASSWORD: '${DB_PASSWORD:-secret}'
        # Сохраняет данные pgsql в том postgres_data.
        volumes:
            - postgres_data:/var/lib/postgresql/data

        restart: unless-stopped  # Автоперезапуск, пока не остановлен вручную

        # Пробрасываем порт 5432 контейнера на порт ${FORWARD_DB_PORT} (по умолчанию 5432) на хосте.
        ports:
            - '${FORWARD_DB_PORT:-5432}:5432'

        # Подключение к сети (app-network)
        networks:
            - app-network

        # Проверяет, готова ли БД принимать подключения
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-postgres} -d ${DB_DATABASE:-laravel}"]
            interval: 5s
            timeout: 5s
            retries: 5

    # Описание сервиса Redis
    redis:
        image: redis:alpine

        # Пробрасывает порт 6379 контейнера на порт ${REDIS_PORT} (по умолчанию 6379) на хосте.
        ports:
            - "${REDIS_PORT:-6379}:6379"

        # Сохраняет данные Redis в том redis_data.
        volumes:
            - redis_data:/data:z

        restart: unless-stopped  # Автоперезапуск, пока не остановлен вручную

        # Подключение к сети (app-network)
        networks:
            - app-network

        # Проверяет, готова ли БД принимать подключения
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 1s
            timeout: 3s
            retries: 30

    # Описание сервиса RabbitMQ
    rabbitmq:
        image: rabbitmq:4.1-management
        container_name: rabbitmq
        ports:
            - "5672:5672"  # AMQP порт
            - "15672:15672"  # Web интерфейс управления
        environment:
            RABBITMQ_DEFAULT_USER: '${RABBITMQ_USER:-sail}'
            RABBITMQ_DEFAULT_PASS: '${RABBITMQ_PASSWORD:-password}'
        volumes:
            - rabbitmq_data:/var/lib/rabbitmq
        networks:
            - app-network
        healthcheck:
            test: [ "CMD", "rabbitmqctl", "status" ]
            interval: 5s
            timeout: 10s
            retries: 5
        restart: unless-stopped
# Создаем сеть app-network для связи между контейнерами.
networks:
    app-network:
        driver: bridge

# Объявляет тома для хранения данных PostgreSQL, Redis, Rabbitmq (чтобы данные сохранялись после удаления контейнеров).
volumes:
    postgres_data:
    redis_data:
    rabbitmq_data:
